#Exercise 1
#1. Создать список и заполнить его элементами различных типов данных. 
#Реализовать скрипт проверки типа данных каждого элемента. 
#Использовать функцию type() для проверки типа. Элементы списка можно 
#не запрашивать у пользователя, а указать явно, в программе.

cat = [1, "cat", 'Mota', '5year', '5kg']
print(cat)
for el in cat:
    print(el, ' - ', type(el))
    
#Exercise 2
#Для списка реализовать обмен значений соседних элементов. Значениями 
#обмениваются элементы с индексами 0 и 1, 2 и 3 и т. д. При нечётном количестве 
#элементов последний сохранить на своём месте. Для заполнения списка элементов 
#нужно использовать функцию input().
    
my_list = (list(input("Ведите любую последовательность целых чисел: ")))
my_list[::2], my_list[1::2] = my_list[1::2], my_list[::2]
print(my_list) 

#Exercise 3
#Пользователь вводит месяц в виде целого числа от 1 до 12. Сообщить, к 
#какому времени года относится месяц (зима, весна, лето, осень). 
#Напишите решения через list и dict.

#Вариант через список

mnth = int(input("Введите номер месяца: "))
wint = [12, 1, 2]
sprng = [3, 4, 5]
smmer = [6, 7, 8]
otmn = [9, 10, 11] 
if wint.count(mnth) > 0:
    print('It is winter')
elif sprng.count(mnth) > 0:
    print('It is spring')
elif smmer.count(mnth) > 0:
    print('It is summer')
else:
    print('It is autumn')

#Вариант через словарь 
  
season = int(input("Введите номер месяца: "))
my_dict = {12: 'winter', 1: 'winter', 2: 'winter', 3: 'spring', 4: 'spring', 5: 'spring', 6: 'summer', 7: 'summer', 8: 'summer', 9: 'autumn',  10: 'autumn', 11: 'autumn'}    
print('It is ', my_dict.get(season))

#Exercise 4
#Пользователь вводит строку из нескольких слов, разделённых пробелами. 
#Вывести каждое слово с новой строки. Строки нужно пронумеровать. Если слово 
#длинное, выводить только первые 10 букв в слове.
sentence = (input("Введите несколько слов, разделенных пробелами:"))
n = 1
while n <= (len(sentence.split())):
    for el in sentence.split():
        print(n, el[:10])
        n = n + 1
       
        
#Exercise 5.
#Реализовать структуру «Рейтинг», представляющую собой набор натуральных 
#чисел, который не возрастает. У пользователя нужно запрашивать новый элемент 
#рейтинга. Если в рейтинге существуют элементы с одинаковыми значениями, 
#то новый элемент с тем же значением должен разместиться после них.
#Подсказка. Например, набор натуральных чисел: 7, 5, 3, 3, 2.
#Пользователь ввёл число 3. Результат: 7, 5, 3, 3, 3, 2.
#Пользователь ввёл число 8. Результат: 8, 7, 5, 3, 3, 2.
#Пользователь ввёл число 1. Результат: 7, 5, 3, 3, 2, 1.
#Набор натуральных чисел можно задать сразу в коде, например, my_list = [7, 5, 3, 3, 2].

my_list = [7, 5, 3, 3, 2]
my_list.append(int(input("Введите натуральное число:")))
my_list.sort(reverse = True)
print(my_list)